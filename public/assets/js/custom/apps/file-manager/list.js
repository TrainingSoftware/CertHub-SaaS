/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/apps/file-manager/list.js":
/*!***********************************************************!*\
  !*** ./resources/src/js/custom/apps/file-manager/list.js ***!
  \***********************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTFileManagerList = function () {\n  // Define shared variables\n  var datatable;\n  var table; // Private functions\n\n  var initDatatable = function initDatatable() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var dateCol = dateRow[3]; // select date from 4th column in table\n\n      var realDate = moment(dateCol.innerHTML, \"DD MMM YYYY, LT\").format();\n      dateCol.setAttribute('data-order', realDate);\n    });\n    var foldersListOptions = {\n      \"info\": false,\n      'order': [],\n      \"scrollY\": \"700px\",\n      \"scrollCollapse\": true,\n      \"paging\": false,\n      'ordering': false,\n      'columns': [{\n        data: 'checkbox'\n      }, {\n        data: 'name'\n      }, {\n        data: 'size'\n      }, {\n        data: 'date'\n      }, {\n        data: 'action'\n      }],\n      'language': {\n        emptyTable: \"<div class=\\\"d-flex flex-column flex-center\\\">\\n                    <img src=\\\"assets/media/illustrations/sketchy-1/5.png\\\" class=\\\"mw-400px\\\" />\\n                    <div class=\\\"fs-1 fw-bolder text-dark\\\">No items found.</div>\\n                    <div class=\\\"fs-6\\\">Start creating new folders or uploading a new file!</div>\\n                </div>\"\n      }\n    };\n    var filesListOptions = {\n      \"info\": false,\n      'order': [],\n      'pageLength': 10,\n      \"lengthChange\": false,\n      'ordering': false,\n      'columns': [{\n        data: 'checkbox'\n      }, {\n        data: 'name'\n      }, {\n        data: 'size'\n      }, {\n        data: 'date'\n      }, {\n        data: 'action'\n      }],\n      'language': {\n        emptyTable: \"<div class=\\\"d-flex flex-column flex-center\\\">\\n                    <img src=\\\"assets/media/illustrations/sketchy-1/5.png\\\" class=\\\"mw-400px\\\" />\\n                    <div class=\\\"fs-1 fw-bolder text-dark mb-4\\\">No items found.</div>\\n                    <div class=\\\"fs-6\\\">Start creating new folders or uploading a new file!</div>\\n                </div>\"\n      },\n      conditionalPaging: true\n    }; // Define datatable options to load\n\n    var loadOptions;\n\n    if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\n      loadOptions = foldersListOptions;\n    } else {\n      loadOptions = filesListOptions;\n    } // Init datatable --- more info on datatables: https://datatables.net/manual/\n\n\n    datatable = $(table).DataTable(loadOptions); // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n\n    datatable.on('draw', function () {\n      initToggleToolbar();\n      handleDeleteRows();\n      toggleToolbars();\n      resetNewFolder();\n      KTMenu.createInstances();\n      initCopyLink();\n      countTotalItems();\n    });\n  }; // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n\n\n  var handleSearchDatatable = function handleSearchDatatable() {\n    var filterSearch = document.querySelector('[data-kt-filemanager-table-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  }; // Delete customer\n\n\n  var handleDeleteRows = function handleDeleteRows() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-filemanager-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault(); // Select parent row\n\n        var parent = e.target.closest('tr'); // Get customer name\n\n        var fileName = parent.querySelectorAll('td')[1].innerText; // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + fileName + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + fileName + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  }; // Init toggle toolbar\n\n\n  var initToggleToolbar = function initToggleToolbar() {\n    // Toggle selected action toolbar\n    // Select all checkboxes\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n\n    if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\n      checkboxes = document.querySelectorAll('#kt_file_manager_list_wrapper [type=\"checkbox\"]');\n    } // Select elements\n\n\n    var deleteSelected = document.querySelector('[data-kt-filemanager-table-select=\"delete_selected\"]'); // Toggle delete selected toolbar\n\n    checkboxes.forEach(function (c) {\n      // Checkbox on click event\n      c.addEventListener('click', function () {\n        console.log(c);\n        setTimeout(function () {\n          toggleToolbars();\n        }, 50);\n      });\n    }); // Deleted selected rows\n\n    deleteSelected.addEventListener('click', function () {\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n      Swal.fire({\n        text: \"Are you sure you want to delete selected files or folders?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted all selected  files or folders!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove all selected customers\n            checkboxes.forEach(function (c) {\n              if (c.checked) {\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\n              }\n            }); // Remove header checked box\n\n            var headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n            headerCheckbox.checked = false;\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Selected  files or folders was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Toggle toolbars\n\n\n  var toggleToolbars = function toggleToolbars() {\n    // Define variables\n    var toolbarBase = document.querySelector('[data-kt-filemanager-table-toolbar=\"base\"]');\n    var toolbarSelected = document.querySelector('[data-kt-filemanager-table-toolbar=\"selected\"]');\n    var selectedCount = document.querySelector('[data-kt-filemanager-table-select=\"selected_count\"]'); // Select refreshed checkbox DOM elements \n\n    var allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]'); // Detect checkboxes state & count\n\n    var checkedState = false;\n    var count = 0; // Count checked boxes\n\n    allCheckboxes.forEach(function (c) {\n      if (c.checked) {\n        checkedState = true;\n        count++;\n      }\n    }); // Toggle toolbars\n\n    if (checkedState) {\n      selectedCount.innerHTML = count;\n      toolbarBase.classList.add('d-none');\n      toolbarSelected.classList.remove('d-none');\n    } else {\n      toolbarBase.classList.remove('d-none');\n      toolbarSelected.classList.add('d-none');\n    }\n  }; // Handle new folder\n\n\n  var handleNewFolder = function handleNewFolder() {\n    // Select button\n    var newFolder = document.getElementById('kt_file_manager_new_folder'); // Handle click action\n\n    newFolder.addEventListener('click', function (e) {\n      var _folderIcon$classList, _rowWrapper$classList, _rowInput$classList, _spinnerIcon$classLis, _rowButton$classList, _cancelButton$classLi;\n\n      e.preventDefault(); // Ignore if input already exist\n\n      if (table.querySelector('#kt_file_manager_new_folder_row')) {\n        return;\n      } // Create new row elements\n\n\n      var rowElement = document.createElement('tr');\n      var rowWrapper = document.createElement('div');\n      var rowCol1 = document.createElement('td'); // Checkbox column\n\n      var rowCol2 = document.createElement('td'); // Name column\n\n      var rowCol3 = document.createElement('td'); // Size column\n\n      var rowCol4 = document.createElement('td'); // Date column\n\n      var rowCol5 = document.createElement('td'); // Action column\n\n      var rowInput = document.createElement('input');\n      var rowButton = document.createElement('button');\n      var cancelButton = document.createElement('button');\n      var folderIcon = document.createElement('span'); // Set folder icon\n\n      var folderIconClasses = ['svg-icon', 'svg-icon-2x', 'svg-icon-primary', 'me-4'];\n      var folderUploadIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\"> <path opacity=\\\"0.3\\\" d=\\\"M10 4H21C21.6 4 22 4.4 22 5V7H10V4Z\\\" fill=\\\"black\\\"></path> <path d=\\\"M9.2 3H3C2.4 3 2 3.4 2 4V19C2 19.6 2.4 20 3 20H21C21.6 20 22 19.6 22 19V7C22 6.4 21.6 6 21 6H12L10.4 3.60001C10.2 3.20001 9.7 3 9.2 3Z\\\" fill=\\\"black\\\"></path> </svg>\";\n\n      (_folderIcon$classList = folderIcon.classList).add.apply(_folderIcon$classList, folderIconClasses);\n\n      folderIcon.innerHTML = folderUploadIcon; // Set general row attributes\n\n      rowElement.setAttribute('id', 'kt_file_manager_new_folder_row');\n      rowCol2.classList.add('fv-row');\n      var rowWrapperClasses = ['d-flex', 'align-items-center'];\n\n      (_rowWrapper$classList = rowWrapper.classList).add.apply(_rowWrapper$classList, rowWrapperClasses); // Set input element attributes\n\n\n      var inputClasses = ['form-control', 'mw-250px', 'me-3'];\n      rowInput.setAttribute('type', 'text');\n      rowInput.setAttribute('name', 'new_folder_name');\n      rowInput.setAttribute('placeholder', 'Enter the folder name');\n\n      (_rowInput$classList = rowInput.classList).add.apply(_rowInput$classList, inputClasses); // Set button element attributes\n\n\n      var rowButtonClasses = ['btn', 'btn-icon', 'btn-light-primary', 'me-3'];\n      var buttonIcon = \"<span class=\\\"svg-icon svg-icon-1\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\">\\n                    <path d=\\\"M9.89557 13.4982L7.79487 11.2651C7.26967 10.7068 6.38251 10.7068 5.85731 11.2651C5.37559 11.7772 5.37559 12.5757 5.85731 13.0878L9.74989 17.2257C10.1448 17.6455 10.8118 17.6455 11.2066 17.2257L18.1427 9.85252C18.6244 9.34044 18.6244 8.54191 18.1427 8.02984C17.6175 7.47154 16.7303 7.47154 16.2051 8.02984L11.061 13.4982C10.7451 13.834 10.2115 13.834 9.89557 13.4982Z\\\" fill=\\\"black\\\"></path>\\n                </svg>\\n            </span>\";\n      var buttonIndicatorLabel = document.createElement('span');\n      buttonIndicatorLabel.classList.add('indicator-label');\n      buttonIndicatorLabel.innerHTML = buttonIcon;\n      var buttonIndicatorProgress = document.createElement('span');\n      var spinnerIcon = document.createElement('span');\n      var spinnerClasses = ['spinner-border', 'spinner-border-sm', 'align-middle'];\n\n      (_spinnerIcon$classLis = spinnerIcon.classList).add.apply(_spinnerIcon$classLis, spinnerClasses);\n\n      buttonIndicatorProgress.classList.add('indicator-progress');\n      buttonIndicatorProgress.appendChild(spinnerIcon);\n      rowButton.appendChild(buttonIndicatorLabel);\n      rowButton.appendChild(buttonIndicatorProgress);\n\n      (_rowButton$classList = rowButton.classList).add.apply(_rowButton$classList, rowButtonClasses);\n\n      rowButton.setAttribute('id', 'kt_file_manager_add_folder'); // Set cancel button element attributes\n\n      var cancelButtonClasses = ['btn', 'btn-icon', 'btn-light-danger'];\n      var cancelIcon = \"<span class=\\\"svg-icon svg-icon-1\\\">\\n                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\">\\n                    <rect opacity=\\\"0.5\\\" x=\\\"7.05025\\\" y=\\\"15.5356\\\" width=\\\"12\\\" height=\\\"2\\\" rx=\\\"1\\\" transform=\\\"rotate(-45 7.05025 15.5356)\\\" fill=\\\"black\\\"/>\\n                    <rect x=\\\"8.46447\\\" y=\\\"7.05029\\\" width=\\\"12\\\" height=\\\"2\\\" rx=\\\"1\\\" transform=\\\"rotate(45 8.46447 7.05029)\\\" fill=\\\"black\\\"/>\\n                </svg>\\n            </span>\";\n      var cancelIndicator = buttonIndicatorLabel.cloneNode(true);\n      cancelIndicator.innerHTML = cancelIcon;\n      var cancelSpinner = buttonIndicatorProgress.cloneNode(true);\n      cancelButton.append(cancelIndicator);\n      cancelButton.append(cancelSpinner);\n\n      (_cancelButton$classLi = cancelButton.classList).add.apply(_cancelButton$classLi, cancelButtonClasses);\n\n      cancelButton.setAttribute('id', 'kt_file_manager_cancel_folder'); // Append elements into row\n\n      rowWrapper.append(folderIcon);\n      rowWrapper.append(rowInput);\n      rowWrapper.append(rowButton);\n      rowWrapper.append(cancelButton);\n      rowCol2.append(rowWrapper);\n      rowElement.append(rowCol1);\n      rowElement.append(rowCol2);\n      rowElement.append(rowCol3);\n      rowElement.append(rowCol4);\n      rowElement.append(rowCol5); // Add new blank row to datatable\n\n      var tableBody = table.querySelector('tbody');\n      tableBody.prepend(rowElement); // Define validator\n      // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n      var validator = FormValidation.formValidation(rowCol2, {\n        fields: {\n          'new_folder_name': {\n            validators: {\n              notEmpty: {\n                message: 'Folder name is required'\n              }\n            }\n          }\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: '.fv-row',\n            eleInvalidClass: '',\n            eleValidClass: ''\n          })\n        }\n      }); // Handle add new folder button\n\n      rowButton.addEventListener('click', function (e) {\n        e.preventDefault(); // Activate indicator\n\n        rowButton.setAttribute(\"data-kt-indicator\", \"on\"); // Validate form before submit\n\n        if (validator) {\n          validator.validate().then(function (status) {\n            console.log('validated!');\n\n            if (status == 'Valid') {\n              // Simulate process for demo only\n              setTimeout(function () {\n                var _folderLink$classList;\n\n                // Duplicate checkbox and action dropdown\n                var action = \"<div class=\\\"d-flex justify-content-end\\\">                            \\n                                    <!--begin::Share link-->\\n                                    <div class=\\\"ms-2\\\" data-kt-filemanger-table=\\\"copy_link\\\">\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-icon btn-light btn-active-light-primary\\\" data-kt-menu-trigger=\\\"click\\\" data-kt-menu-placement=\\\"bottom-end\\\">\\n                                            <span class=\\\"svg-icon svg-icon-5 m-0\\\">\\n                                                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\">\\n                                                    <path opacity=\\\"0.3\\\" d=\\\"M18.4 5.59998C18.7766 5.9772 18.9881 6.48846 18.9881 7.02148C18.9881 7.55451 18.7766 8.06577 18.4 8.44299L14.843 12C14.466 12.377 13.9547 12.5887 13.4215 12.5887C12.8883 12.5887 12.377 12.377 12 12C11.623 11.623 11.4112 11.1117 11.4112 10.5785C11.4112 10.0453 11.623 9.53399 12 9.15698L15.553 5.604C15.9302 5.22741 16.4415 5.01587 16.9745 5.01587C17.5075 5.01587 18.0188 5.22741 18.396 5.604L18.4 5.59998ZM20.528 3.47205C20.0614 3.00535 19.5074 2.63503 18.8977 2.38245C18.288 2.12987 17.6344 1.99988 16.9745 1.99988C16.3145 1.99988 15.661 2.12987 15.0513 2.38245C14.4416 2.63503 13.8876 3.00535 13.421 3.47205L9.86801 7.02502C9.40136 7.49168 9.03118 8.04568 8.77863 8.6554C8.52608 9.26511 8.39609 9.91855 8.39609 10.5785C8.39609 11.2384 8.52608 11.8919 8.77863 12.5016C9.03118 13.1113 9.40136 13.6653 9.86801 14.132C10.3347 14.5986 10.8886 14.9688 11.4984 15.2213C12.1081 15.4739 12.7616 15.6039 13.4215 15.6039C14.0815 15.6039 14.7349 15.4739 15.3446 15.2213C15.9543 14.9688 16.5084 14.5986 16.975 14.132L20.528 10.579C20.9947 10.1124 21.3649 9.55844 21.6175 8.94873C21.8701 8.33902 22.0001 7.68547 22.0001 7.02551C22.0001 6.36555 21.8701 5.71201 21.6175 5.10229C21.3649 4.49258 20.9947 3.93867 20.528 3.47205Z\\\" fill=\\\"black\\\"></path>\\n                                                    <path d=\\\"M14.132 9.86804C13.6421 9.37931 13.0561 8.99749 12.411 8.74695L12 9.15698C11.6234 9.53421 11.4119 10.0455 11.4119 10.5785C11.4119 11.1115 11.6234 11.6228 12 12C12.3766 12.3772 12.5881 12.8885 12.5881 13.4215C12.5881 13.9545 12.3766 14.4658 12 14.843L8.44699 18.396C8.06999 18.773 7.55868 18.9849 7.02551 18.9849C6.49235 18.9849 5.98101 18.773 5.604 18.396C5.227 18.019 5.0152 17.5077 5.0152 16.9745C5.0152 16.4413 5.227 15.93 5.604 15.553L8.74701 12.411C8.28705 11.233 8.28705 9.92498 8.74701 8.74695C8.10159 8.99737 7.5152 9.37919 7.02499 9.86804L3.47198 13.421C2.52954 14.3635 2.00009 15.6417 2.00009 16.9745C2.00009 18.3073 2.52957 19.5855 3.47202 20.528C4.41446 21.4704 5.69269 21.9999 7.02551 21.9999C8.35833 21.9999 9.63656 21.4704 10.579 20.528L14.132 16.975C14.5987 16.5084 14.9689 15.9544 15.2215 15.3447C15.4741 14.735 15.6041 14.0815 15.6041 13.4215C15.6041 12.7615 15.4741 12.108 15.2215 11.4983C14.9689 10.8886 14.5987 10.3347 14.132 9.86804Z\\\" fill=\\\"black\\\"></path>\\n                                                </svg>\\n                                            </span>\\n                                        </button>\\n                                        <!--begin::Menu-->\\n                                        <div class=\\\"menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-300px\\\" data-kt-menu=\\\"true\\\">\\n                                            <!--begin::Card-->\\n                                            <div class=\\\"card card-flush\\\">\\n                                                <div class=\\\"card-body p-5\\\">\\n                                                    <!--begin::Loader-->\\n                                                    <div class=\\\"d-flex\\\" data-kt-filemanger-table=\\\"copy_link_generator\\\">\\n                                                        <!--begin::Spinner-->\\n                                                        <div class=\\\"me-5\\\" data-kt-indicator=\\\"on\\\">\\n                                                            <span class=\\\"indicator-progress\\\">\\n                                                                <span class=\\\"spinner-border spinner-border-sm align-middle ms-2\\\"></span>\\n                                                            </span>\\n                                                        </div>\\n                                                        <!--end::Spinner-->\\n\\n                                                        <!--begin::Label-->\\n                                                        <div class=\\\"fs-6 text-dark\\\">Generating Share Link...</div>\\n                                                        <!--end::Label-->\\n                                                    </div>\\n                                                    <!--end::Loader-->\\n\\n                                                    <!--begin::Link-->\\n                                                    <div class=\\\"d-flex flex-column text-start d-none\\\" data-kt-filemanger-table=\\\"copy_link_result\\\">\\n                                                        <div class=\\\"d-flex mb-5\\\">\\n                                                            <?php echo Theme::getSvgIcon('icons/duotune/arrows/arr084.svg', \\\"svg-icon-1 svg-icon-success me-3\\\") ?>\\n                                                            <div class=\\\"fs-6 text-dark\\\">Share Link Generated</div>\\n                                                        </div>\\n                                                        <input type=\\\"text\\\" class=\\\"form-control form-control-sm\\\" value=\\\"https://path/to/file/or/folder/\\\" />\\n                                                        <div class=\\\"text-muted fw-normal fs-8 px-3\\\">Read only. <a href=\\\"<?php echo Theme::getPageUrl('apps/file-manager/settings/') ?>\\\">Change permissions</a></div>\\n                                                    </div>\\n                                                    <!--end::Link-->\\n                                                </div>\\n                                            </div>\\n                                            <!--end::Card-->\\n                                        </div>\\n                                        <!--end::Menu-->\\n                                        <!--end::Share link-->\\n                                    </div>\\n                            \\n                                    <!--begin::More-->\\n                                    <div class=\\\"ms-2\\\">\\n                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-icon btn-light btn-active-light-primary\\\" data-kt-menu-trigger=\\\"click\\\" data-kt-menu-placement=\\\"bottom-end\\\">\\n                                            <span class=\\\"svg-icon svg-icon-5 m-0\\\">\\n                                                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\">\\n                                                    <rect x=\\\"10\\\" y=\\\"10\\\" width=\\\"4\\\" height=\\\"4\\\" rx=\\\"2\\\" fill=\\\"black\\\"></rect>\\n                                                    <rect x=\\\"17\\\" y=\\\"10\\\" width=\\\"4\\\" height=\\\"4\\\" rx=\\\"2\\\" fill=\\\"black\\\"></rect>\\n                                                    <rect x=\\\"3\\\" y=\\\"10\\\" width=\\\"4\\\" height=\\\"4\\\" rx=\\\"2\\\" fill=\\\"black\\\"></rect>\\n                                                </svg>\\n                                            </span>\\n                                        </button>\\n                                        <!--begin::Menu-->\\n                                        <div class=\\\"menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-150px py-4\\\" data-kt-menu=\\\"true\\\">\\n                                            <!--begin::Menu item-->\\n                                            <div class=\\\"menu-item px-3\\\">\\n                                                <a href=\\\"<?php echo Theme::getPageUrl('apps/file-manager/files') ?>\\\" class=\\\"menu-link px-3\\\">\\n                                                    View\\n                                                </a>\\n                                            </div>\\n                                            <!--end::Menu item-->\\n\\n                                            <!--begin::Menu item-->\\n                                            <div class=\\\"menu-item px-3\\\">\\n                                                <a href=\\\"#\\\" class=\\\"menu-link px-3\\\" data-kt-filemanager-table=\\\"rename\\\">\\n                                                    Rename\\n                                                </a>\\n                                            </div>\\n                                            <!--end::Menu item-->\\n\\n                                            <!--begin::Menu item-->\\n                                            <div class=\\\"menu-item px-3\\\">\\n                                                <a href=\\\"#\\\" class=\\\"menu-link px-3\\\">\\n                                                    Download Folder\\n                                                </a>\\n                                            </div>\\n                                            <!--end::Menu item-->\\n\\n                                            <!--begin::Menu item-->\\n                                            <div class=\\\"menu-item px-3\\\">\\n                                                <a href=\\\"#\\\" class=\\\"menu-link px-3\\\" data-kt-filemanager-table-filter=\\\"move_row\\\" data-bs-toggle=\\\"modal\\\" data-bs-target=\\\"#kt_modal_move_to_folder\\\">\\n                                                    Move to folder\\n                                                </a>\\n                                            </div>\\n                                            <!--end::Menu item-->\\n\\n                                            <!--begin::Menu item-->\\n                                            <div class=\\\"menu-item px-3\\\">\\n                                                <a href=\\\"#\\\" class=\\\"menu-link text-danger px-3\\\" data-kt-filemanager-table-filter=\\\"delete_row\\\">\\n                                                    Delete\\n                                                </a>\\n                                            </div>\\n                                            <!--end::Menu item-->\\n                                        </div>\\n                                        <!--end::Menu-->\\n                                        <!--end::More-->\\n                                    </div>\\n                                </div>\";\n                var checkbox = \"<div class=\\\"form-check form-check-sm form-check-custom form-check-solid\\\"><input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" value=\\\"1\\\" /></div>\"; // Create folder link\n\n                var folderLink = document.createElement('a');\n                var folderLinkClasses = ['text-gray-800', 'text-hover-primary'];\n                folderLink.setAttribute('href', '?page=apps/file-manager/blank');\n\n                (_folderLink$classList = folderLink.classList).add.apply(_folderLink$classList, folderLinkClasses);\n\n                folderLink.innerText = rowInput.value;\n                var newRow = datatable.row.add({\n                  'checkbox': checkbox,\n                  'name': folderIcon.outerHTML + folderLink.outerHTML,\n                  \"size\": '-',\n                  \"date\": '-',\n                  'action': action\n                }).node();\n                $(newRow).find('td').eq(4).attr('data-kt-filemanager-table', 'action_dropdown');\n                $(newRow).find('td').eq(4).addClass('text-end'); // Add custom class to last 'td' element --- more info: https://datatables.net/forums/discussion/22341/row-add-cell-class\n                // Re-sort datatable to allow new folder added at the top\n\n                var index = datatable.row(0).index(),\n                    rowCount = datatable.data().length - 1,\n                    insertedRow = datatable.row(rowCount).data(),\n                    tempRow;\n\n                for (var i = rowCount; i > index; i--) {\n                  tempRow = datatable.row(i - 1).data();\n                  datatable.row(i).data(tempRow);\n                  datatable.row(i - 1).data(insertedRow);\n                }\n\n                toastr.options = {\n                  \"closeButton\": true,\n                  \"debug\": false,\n                  \"newestOnTop\": false,\n                  \"progressBar\": false,\n                  \"positionClass\": \"toast-top-right\",\n                  \"preventDuplicates\": false,\n                  \"showDuration\": \"300\",\n                  \"hideDuration\": \"1000\",\n                  \"timeOut\": \"5000\",\n                  \"extendedTimeOut\": \"1000\",\n                  \"showEasing\": \"swing\",\n                  \"hideEasing\": \"linear\",\n                  \"showMethod\": \"fadeIn\",\n                  \"hideMethod\": \"fadeOut\"\n                };\n                toastr.success(rowInput.value + ' was created!'); // Disable indicator\n\n                rowButton.removeAttribute(\"data-kt-indicator\");\n                datatable.draw(false);\n              }, 2000);\n            } else {\n              // Disable indicator\n              rowButton.removeAttribute(\"data-kt-indicator\");\n            }\n          });\n        }\n      }); // Handle cancel new folder button\n\n      cancelButton.addEventListener('click', function (e) {\n        e.preventDefault(); // Activate indicator\n\n        cancelButton.setAttribute(\"data-kt-indicator\", \"on\");\n        setTimeout(function () {\n          // Disable indicator\n          cancelButton.removeAttribute(\"data-kt-indicator\"); // Toggle toastr\n\n          toastr.options = {\n            \"closeButton\": true,\n            \"debug\": false,\n            \"newestOnTop\": false,\n            \"progressBar\": false,\n            \"positionClass\": \"toast-top-right\",\n            \"preventDuplicates\": false,\n            \"showDuration\": \"300\",\n            \"hideDuration\": \"1000\",\n            \"timeOut\": \"5000\",\n            \"extendedTimeOut\": \"1000\",\n            \"showEasing\": \"swing\",\n            \"hideEasing\": \"linear\",\n            \"showMethod\": \"fadeIn\",\n            \"hideMethod\": \"fadeOut\"\n          };\n          toastr.error('Cancelled new folder creation');\n          resetNewFolder();\n        }, 1000);\n      });\n    });\n  }; // Reset add new folder input\n\n\n  var resetNewFolder = function resetNewFolder() {\n    var newFolderRow = table.querySelector('#kt_file_manager_new_folder_row');\n\n    if (newFolderRow) {\n      newFolderRow.parentNode.removeChild(newFolderRow);\n    }\n  }; // Handle rename file or folder\n\n\n  var handleRename = function handleRename() {\n    var renameButton = table.querySelectorAll('[data-kt-filemanager-table=\"rename\"]');\n    var nameValue;\n    renameButton.forEach(function (button) {\n      button.addEventListener('click', function (e) {\n        e.preventDefault(); // Select parent row\n\n        var parent = e.target.closest('tr'); // Get name column\n\n        var nameCol = parent.querySelectorAll('td')[1];\n        var colIcon = nameCol.querySelector('.svg-icon');\n        nameValue = nameCol.innerText; // Set rename input template\n\n        var renameInput = \"<div class=\\\"fv-row\\\"><div class=\\\"d-flex align-items-center\\\">\\n                    \".concat(colIcon.outerHTML, \"\\n                    <input type=\\\"text\\\" id=\\\"kt_file_manager_rename_input\\\" name=\\\"rename_folder_name\\\" placeholder=\\\"Enter the new folder name\\\" class=\\\"form-control mw-250px me-3\\\" value=\\\"\").concat(nameValue, \"\\\" />\\n                    <button class=\\\"btn btn-icon btn-light-primary me-3\\\" id=\\\"kt_file_manager_rename_folder\\\">\\n                        <span class=\\\"svg-icon svg-icon-1\\\">\\n                            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\">\\n                                <path d=\\\"M9.89557 13.4982L7.79487 11.2651C7.26967 10.7068 6.38251 10.7068 5.85731 11.2651C5.37559 11.7772 5.37559 12.5757 5.85731 13.0878L9.74989 17.2257C10.1448 17.6455 10.8118 17.6455 11.2066 17.2257L18.1427 9.85252C18.6244 9.34044 18.6244 8.54191 18.1427 8.02984C17.6175 7.47154 16.7303 7.47154 16.2051 8.02984L11.061 13.4982C10.7451 13.834 10.2115 13.834 9.89557 13.4982Z\\\" fill=\\\"black\\\"/>\\n                            </svg>\\n                        </span>\\n                    </button>\\n                    <button class=\\\"btn btn-icon btn-light-danger\\\" id=\\\"kt_file_manager_rename_folder_cancel\\\">\\n                        <span class=\\\"indicator-label\\\">\\n                            <span class=\\\"svg-icon svg-icon-1\\\">\\n                                <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\">\\n                                    <rect opacity=\\\"0.5\\\" x=\\\"7.05025\\\" y=\\\"15.5356\\\" width=\\\"12\\\" height=\\\"2\\\" rx=\\\"1\\\" transform=\\\"rotate(-45 7.05025 15.5356)\\\" fill=\\\"black\\\"/>\\n                                    <rect x=\\\"8.46447\\\" y=\\\"7.05029\\\" width=\\\"12\\\" height=\\\"2\\\" rx=\\\"1\\\" transform=\\\"rotate(45 8.46447 7.05029)\\\" fill=\\\"black\\\"/>\\n                                </svg>\\n                            </span>\\n                        </span>\\n                        <span class=\\\"indicator-progress\\\"><span class=\\\"spinner-border spinner-border-sm align-middle\\\"></span></span>\\n                    </button>\\n                </div></div>\"); // Swap current column content with input template\n\n        nameCol.innerHTML = renameInput; // Rename file / folder validator\n\n        var renameValidator = FormValidation.formValidation(nameCol, {\n          fields: {\n            'rename_folder_name': {\n              validators: {\n                notEmpty: {\n                  message: 'Name is required'\n                }\n              }\n            }\n          },\n          plugins: {\n            trigger: new FormValidation.plugins.Trigger(),\n            bootstrap: new FormValidation.plugins.Bootstrap5({\n              rowSelector: '.fv-row',\n              eleInvalidClass: '',\n              eleValidClass: ''\n            })\n          }\n        }); // Rename input button action\n\n        var renameInputButton = document.querySelector('#kt_file_manager_rename_folder');\n        renameInputButton.addEventListener('click', function (e) {\n          e.preventDefault(); // Detect if valid\n\n          if (renameValidator) {\n            renameValidator.validate().then(function (status) {\n              console.log('validated!');\n\n              if (status == 'Valid') {\n                // Pop up confirmation\n                Swal.fire({\n                  text: \"Are you sure you want to rename \" + nameValue + \"?\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  buttonsStyling: false,\n                  confirmButtonText: \"Yes, rename it!\",\n                  cancelButtonText: \"No, cancel\",\n                  customClass: {\n                    confirmButton: \"btn fw-bold btn-danger\",\n                    cancelButton: \"btn fw-bold btn-active-light-primary\"\n                  }\n                }).then(function (result) {\n                  if (result.value) {\n                    Swal.fire({\n                      text: \"You have renamed \" + nameValue + \"!.\",\n                      icon: \"success\",\n                      buttonsStyling: false,\n                      confirmButtonText: \"Ok, got it!\",\n                      customClass: {\n                        confirmButton: \"btn fw-bold btn-primary\"\n                      }\n                    }).then(function () {\n                      // Get new file / folder name value\n                      var newValue = document.querySelector('#kt_file_manager_rename_input').value; // New column data template\n\n                      var newData = \"<div class=\\\"d-flex align-items-center\\\">\\n                                                \".concat(colIcon.outerHTML, \"\\n                                                <a href=\\\"?page=apps/file-manager/files/\\\" class=\\\"text-gray-800 text-hover-primary\\\">\").concat(newValue, \"</a>\\n                                            </div>\"); // Draw datatable with new content -- Add more events here for any server-side events\n\n                      datatable.cell($(nameCol)).data(newData).draw();\n                    });\n                  } else if (result.dismiss === 'cancel') {\n                    Swal.fire({\n                      text: nameValue + \" was not renamed.\",\n                      icon: \"error\",\n                      buttonsStyling: false,\n                      confirmButtonText: \"Ok, got it!\",\n                      customClass: {\n                        confirmButton: \"btn fw-bold btn-primary\"\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        }); // Cancel rename input\n\n        var cancelInputButton = document.querySelector('#kt_file_manager_rename_folder_cancel');\n        cancelInputButton.addEventListener('click', function (e) {\n          e.preventDefault(); // Simulate process for demo only\n\n          cancelInputButton.setAttribute(\"data-kt-indicator\", \"on\");\n          setTimeout(function () {\n            var revertTemplate = \"<div class=\\\"d-flex align-items-center\\\">\\n                            \".concat(colIcon.outerHTML, \"\\n                            <a href=\\\"?page=apps/file-manager/files/\\\" class=\\\"text-gray-800 text-hover-primary\\\">\").concat(nameValue, \"</a>\\n                        </div>\"); // Remove spinner\n\n            cancelInputButton.removeAttribute(\"data-kt-indicator\"); // Draw datatable with new content -- Add more events here for any server-side events\n\n            datatable.cell($(nameCol)).data(revertTemplate).draw();\n          }, 1000);\n        });\n      });\n    });\n  }; // Init dropzone\n\n\n  var initDropzone = function initDropzone() {\n    // set the dropzone container id\n    var id = \"#kt_modal_upload_dropzone\";\n    var dropzone = document.querySelector(id); // set the preview element template\n\n    var previewNode = dropzone.querySelector(\".dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parentNode.innerHTML;\n    previewNode.parentNode.removeChild(previewNode);\n    var myDropzone = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"path/to/your/server\",\n      // Set the url for your upload script location\n      parallelUploads: 10,\n      previewTemplate: previewTemplate,\n      maxFilesize: 1,\n      // Max filesize in MB\n      autoProcessQueue: false,\n      // Stop auto upload\n      autoQueue: false,\n      // Make sure the files aren't queued until manually added\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: id + \" .dropzone-select\" // Define the element that should be used as click trigger to select files.\n\n    });\n    myDropzone.on(\"addedfile\", function (file) {\n      // Hook each start button\n      file.previewElement.querySelector(id + \" .dropzone-start\").onclick = function () {\n        // myDropzone.enqueueFile(file); -- default dropzone function\n        // Process simulation for demo only\n        var progressBar = file.previewElement.querySelector('.progress-bar');\n        progressBar.style.opacity = \"1\";\n        var width = 1;\n        var timer = setInterval(function () {\n          if (width >= 100) {\n            myDropzone.emit(\"success\", file);\n            myDropzone.emit(\"complete\", file);\n            clearInterval(timer);\n          } else {\n            width++;\n            progressBar.style.width = width + '%';\n          }\n        }, 20);\n      };\n\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\n      dropzoneItems.forEach(function (dropzoneItem) {\n        dropzoneItem.style.display = '';\n      });\n      dropzone.querySelector('.dropzone-upload').style.display = \"inline-block\";\n      dropzone.querySelector('.dropzone-remove-all').style.display = \"inline-block\";\n    }); // Hide the total progress bar when nothing's uploading anymore\n\n    myDropzone.on(\"complete\", function (file) {\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\n      setTimeout(function () {\n        progressBars.forEach(function (progressBar) {\n          progressBar.querySelector('.progress-bar').style.opacity = \"0\";\n          progressBar.querySelector('.progress').style.opacity = \"0\";\n          progressBar.querySelector('.dropzone-start').style.opacity = \"0\";\n        });\n      }, 300);\n    }); // Setup the buttons for all transfers\n\n    dropzone.querySelector(\".dropzone-upload\").addEventListener('click', function () {\n      // myDropzone.processQueue(); --- default dropzone process\n      // Process simulation for demo only\n      myDropzone.files.forEach(function (file) {\n        var progressBar = file.previewElement.querySelector('.progress-bar');\n        progressBar.style.opacity = \"1\";\n        var width = 1;\n        var timer = setInterval(function () {\n          if (width >= 100) {\n            myDropzone.emit(\"success\", file);\n            myDropzone.emit(\"complete\", file);\n            clearInterval(timer);\n          } else {\n            width++;\n            progressBar.style.width = width + '%';\n          }\n        }, 20);\n      });\n    }); // Setup the button for remove all files\n\n    dropzone.querySelector(\".dropzone-remove-all\").addEventListener('click', function () {\n      Swal.fire({\n        text: \"Are you sure you would like to remove all files?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, remove it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n          dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n          myDropzone.removeAllFiles(true);\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your files was not removed!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    }); // On all files completed upload\n\n    myDropzone.on(\"queuecomplete\", function (progress) {\n      var uploadIcons = dropzone.querySelectorAll('.dropzone-upload');\n      uploadIcons.forEach(function (uploadIcon) {\n        uploadIcon.style.display = \"none\";\n      });\n    }); // On all files removed\n\n    myDropzone.on(\"removedfile\", function (file) {\n      if (myDropzone.files.length < 1) {\n        dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n        dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n      }\n    });\n  }; // Init copy link\n\n\n  var initCopyLink = function initCopyLink() {\n    // Select all copy link elements\n    var elements = table.querySelectorAll('[data-kt-filemanger-table=\"copy_link\"]');\n    elements.forEach(function (el) {\n      // Define elements\n      var button = el.querySelector('button');\n      var generator = el.querySelector('[data-kt-filemanger-table=\"copy_link_generator\"]');\n      var result = el.querySelector('[data-kt-filemanger-table=\"copy_link_result\"]');\n      var input = el.querySelector('input'); // Click action\n\n      button.addEventListener('click', function (e) {\n        e.preventDefault(); // Reset toggle\n\n        generator.classList.remove('d-none');\n        result.classList.add('d-none');\n        var linkTimeout;\n        clearTimeout(linkTimeout);\n        linkTimeout = setTimeout(function () {\n          generator.classList.add('d-none');\n          result.classList.remove('d-none');\n          input.select();\n        }, 2000);\n      });\n    });\n  }; // Handle move to folder\n\n\n  var handleMoveToFolder = function handleMoveToFolder() {\n    var element = document.querySelector('#kt_modal_move_to_folder');\n    var form = element.querySelector('#kt_modal_move_to_folder_form');\n    var saveButton = form.querySelector('#kt_modal_move_to_folder_submit');\n    var moveModal = new bootstrap.Modal(element); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'move_to_folder': {\n          validators: {\n            notEmpty: {\n              message: 'Please select a folder.'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n    saveButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      saveButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Simulate process for demo only\n            setTimeout(function () {\n              Swal.fire({\n                text: \"Are you sure you would like to move to this folder\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, move it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\",\n                  cancelButton: \"btn btn-active-light\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  form.reset(); // Reset form\t\n\n                  moveModal.hide(); // Hide modal\t\t\t\n\n                  toastr.options = {\n                    \"closeButton\": true,\n                    \"debug\": false,\n                    \"newestOnTop\": false,\n                    \"progressBar\": false,\n                    \"positionClass\": \"toast-top-right\",\n                    \"preventDuplicates\": false,\n                    \"showDuration\": \"300\",\n                    \"hideDuration\": \"1000\",\n                    \"timeOut\": \"5000\",\n                    \"extendedTimeOut\": \"1000\",\n                    \"showEasing\": \"swing\",\n                    \"hideEasing\": \"linear\",\n                    \"showMethod\": \"fadeIn\",\n                    \"hideMethod\": \"fadeOut\"\n                  };\n                  toastr.success('1 item has been moved.');\n                  saveButton.removeAttribute(\"data-kt-indicator\");\n                } else {\n                  Swal.fire({\n                    text: \"Your action has been cancelled!.\",\n                    icon: \"error\",\n                    buttonsStyling: false,\n                    confirmButtonText: \"Ok, got it!\",\n                    customClass: {\n                      confirmButton: \"btn btn-primary\"\n                    }\n                  });\n                  saveButton.removeAttribute(\"data-kt-indicator\");\n                }\n              });\n            }, 500);\n          } else {\n            saveButton.removeAttribute(\"data-kt-indicator\");\n          }\n        });\n      }\n    });\n  }; // Count total number of items\n\n\n  var countTotalItems = function countTotalItems() {\n    var counter = document.getElementById('kt_file_manager_items_counter'); // Count total number of elements in datatable --- more info: https://datatables.net/reference/api/count()\n\n    counter.innerText = datatable.rows().count() + ' items';\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      table = document.querySelector('#kt_file_manager_list');\n\n      if (!table) {\n        return;\n      }\n\n      initDatatable();\n      initToggleToolbar();\n      handleSearchDatatable();\n      handleDeleteRows();\n      handleNewFolder();\n      initDropzone();\n      initCopyLink();\n      handleRename();\n      handleMoveToFolder();\n      countTotalItems();\n      KTMenu.createInstances();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTFileManagerList.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/src/js/custom/apps/file-manager/list.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/apps/file-manager/list.js"]();
/******/ 	
/******/ })()
;